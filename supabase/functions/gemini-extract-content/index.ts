
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.49.8';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

const supabase = createClient(
  Deno.env.get('SUPABASE_URL') ?? '',
  Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
);

const GOOGLE_AI_API_KEY = Deno.env.get('GOOGLE_AI_API_KEY');

async function extractContentWithGemini(fileBuffer: ArrayBuffer, fileName: string, mimeType: string): Promise<{
  content: string, 
  summary: string, 
  keywords: string[]
}> {
  if (!GOOGLE_AI_API_KEY) {
    throw new Error('Google AI API key not configured');
  }

  console.log(`Processing file with Gemini: ${fileName} (${mimeType})`);

  // Convert file buffer to base64
  const base64Data = btoa(String.fromCharCode(...new Uint8Array(fileBuffer)));

  const prompt = `Please analyze this document and extract:
1. Full text content
2. A concise summary (2-3 sentences)
3. Key topics and keywords (as a comma-separated list)

Format your response as JSON:
{
  "content": "full extracted text here",
  "summary": "document summary here", 
  "keywords": ["keyword1", "keyword2", "keyword3"]
}`;

  try {
    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${GOOGLE_AI_API_KEY}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        contents: [{
          parts: [
            { text: prompt },
            {
              inline_data: {
                mime_type: mimeType,
                data: base64Data
              }
            }
          ]
        }],
        generationConfig: {
          maxOutputTokens: 8000,
          temperature: 0.1,
        }
      })
    });

    if (!response.ok) {
      throw new Error(`Gemini API error: ${response.status} ${response.statusText}`);
    }

    const data = await response.json();
    const textResponse = data.candidates?.[0]?.content?.parts?.[0]?.text;

    if (!textResponse) {
      throw new Error('No response generated from Gemini');
    }

    // Try to parse as JSON, fallback to extracting content manually
    try {
      const parsed = JSON.parse(textResponse);
      return {
        content: parsed.content || textResponse,
        summary: parsed.summary || 'Summary generated by AI',
        keywords: Array.isArray(parsed.keywords) ? parsed.keywords : []
      };
    } catch {
      // Fallback if JSON parsing fails
      return {
        content: textResponse,
        summary: 'Content extracted and processed by AI',
        keywords: []
      };
    }
  } catch (error) {
    console.error('Gemini extraction error:', error);
    throw error;
  }
}

serve(async (req) => {
  console.log('=== Gemini Extract Content function called ===', req.method);
  
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { fileId, userId } = await req.json();
    
    if (!fileId || !userId) {
      return new Response(JSON.stringify({ error: 'File ID and User ID are required' }), {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    console.log('Processing file extraction for:', fileId, 'user:', userId);

    // Get file info from database
    const { data: file, error: fileError } = await supabase
      .from('client_files')
      .select('*')
      .eq('id', fileId)
      .eq('user_id', userId)
      .single();

    if (fileError || !file) {
      console.error('File fetch error:', fileError);
      return new Response(JSON.stringify({ error: 'File not found' }), {
        status: 404,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    // Download file from storage
    const { data: fileData, error: downloadError } = await supabase.storage
      .from('client-files')
      .download(file.file_path);

    if (downloadError || !fileData) {
      console.error('File download error:', downloadError);
      return new Response(JSON.stringify({ error: 'Failed to download file' }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    // Convert blob to array buffer
    const fileBuffer = await fileData.arrayBuffer();
    
    // Extract content using Gemini
    const startTime = Date.now();
    const { content, summary, keywords } = await extractContentWithGemini(
      fileBuffer, 
      file.file_name, 
      file.file_type
    );
    const processingTime = Date.now() - startTime;

    console.log(`Extraction completed in ${processingTime}ms. Content length: ${content.length}`);

    // Update file record with extracted content
    const { error: updateError } = await supabase
      .from('client_files')
      .update({
        file_content_text: content,
        content_summary: summary,
        content_keywords: keywords,
        content_extracted_at: new Date().toISOString()
      })
      .eq('id', fileId);

    if (updateError) {
      console.error('Database update error:', updateError);
      return new Response(JSON.stringify({ error: 'Failed to save extracted content' }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    return new Response(JSON.stringify({
      success: true,
      extractedLength: content.length,
      summary: summary,
      keywordCount: keywords.length,
      processingTimeMs: processingTime
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Error in gemini-extract-content function:', error);
    
    return new Response(JSON.stringify({ 
      error: error instanceof Error ? error.message : 'Content extraction failed',
      success: false
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});
